minutes = 3.840

servicesForTwoDays = {
    1: 1000,
    2: 600,
    3: 500
}

# Једна фирма изнајмљује своје рачунарске ресурсе. Фирма поседује четири различита рачунара, који су
# подешени тако да на њима могу да се извршавају три различита сервиса. Време извршавања сервиса на
# рачунарима, у минутима, дато је у наредној табели.
time = [
    [5, 7, 4, 10],
    [6, 12, 8, 15],
    [13, 14, 9, 17]
]

# Зарада од извршавања сваког (појединачног) сервиса на одговарајућем рачунару дата је у следећој
# табели, у RSD.
price = [
    [-10, -8, -6, -9],
    [-18, -20, -15, -17],
    [-15, -16, -13, -17]
]

# number of accepted requests for service
#   :1 => a
#   :2 => b
#   :3 => c

# Укупан број пристиглих захтева за сервисима које је могуће извршити у наредна два дана
# (48 часова) су: 1000 за сервис 1, 600 за сервис 2 и 500 за сервис 3. Одредити колико и којих сервиса је
# потребно извршити на одговарајућем рачунару, како би зарада била максимална (не морају сви захтеви
# за сервисима да буду обрађени). Такође, потребно је израчунати максималну зараду за одређен распоред
# сервиса. Наплаћују се само они сервиси који су се извршили до краја (тј. број сервиса који се извршавају
# мора бити цео).
# Формулисати проблем као LP и решити га коришћењем Dantzig simplex алгоритма. Означити са
# pk x број сервиса p који се извршава на рачунару k , при чему је p 1,2,3 и k 1,2,3,4 . Запис решења
# овог проблема је ( , ,... )
# 11 12 34 x  x x x .
# Уколико се добије нецелобројно решење, закружити pk x на најближи цео број и проверити да ли
# су задовољени сви услови. Ако услови нису задовољени, сваки нецелобројни pk x заокружити на први
# мањи цео број.
# Решење проблема би требало да садржи:
# 1) код коришћен за решавање и
# 2) ASCII фајл у којем је записано крајње решење ( , ,... )
# 11 12 34 x  x x x и укупнa остваренa зарадa.


p = [1, 2, 3]
k = [1, 2, 3, 4]
